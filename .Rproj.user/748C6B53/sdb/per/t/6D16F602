{
    "collab_server" : "",
    "contents" : "# server.R\nrequire(ggplot2)\nrequire(dplyr)\nrequire(shiny)\nrequire(shinydashboard)\nrequire(data.world)\nrequire(readr)\nrequire(DT)\nrequire(leaflet)\nrequire(plotly)\n\n# The following query is for the select list in the Barcharts -> Barchart with Table Calculation tab.\nregions = query(\n  data.world(propsfile = \"www/.data.world\"),\n  dataset=\"cannata/superstoreorders\", type=\"sql\",\n  query=\"select distinct Region as D, Region as R\n  from SuperStoreOrders\n  order by 1\"\n) # %>% View()\nif(regions[1] == \"Server error\") {\n  print(\"Getting Regions from csv\")\n  file_path = \"www/SuperStoreOrders.csv\"\n  df <- readr::read_csv(file_path) \n  tdf1 = df %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(D = Region)\n  tdf2 = df %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(R = Region)\n  regions = bind_cols(tdf1, tdf2)\n}\nregion_list <- as.list(regions$D, regions$R)\nregion_list <- append(list(\"All\" = \"All\"), region_list)\n\n# The following query is for the select list in the Barcharts -> High Discount Orders tab.\nhighDiscounts <- query(\n  data.world(propsfile = \"www/.data.world\"),\n  dataset=\"cannata/superstoreorders\", type=\"sql\",\n  query=\"\n  SELECT distinct Order_Id, sum(Discount) as sumDiscount, sum(Sales) as\n  sumSales\n  FROM SuperStoreOrders\n  where Region != 'Internationalâ€™\n  group by Order_Id\n  having sum(Discount) >= .3\"\n) # %>% View()\n  View(highDiscounts)\n  \n  highDiscountCustomers <- query(\n    data.world(propsfile = \"www/.data.world\"),\n    dataset=\"cannata/superstoreorders\", type=\"sql\",\n    query=\"\n    SELECT distinct Customer_Name, City, State, Order_Id\n    FROM SuperStoreOrders\n    where Order_Id in\n    (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    order by Order_Id\",\n queryParameters = highDiscounts$Order_Id\n) # %>% View()\nView(highDiscountCustomers)\n\nstateAbreviations <- query(\n  data.world(propsfile = \"www/.data.world\"),\n  dataset=\"cannata/superstoreorders\", type=\"sql\",\n  query=\"SELECT distinct name as State, abbreviation as Abbreviation\n FROM markmarkoh.`us-state-table`.`state_table.csv/state_table`\n where name in\n(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n order by name\",\n  queryParameters = highDiscountCustomers$State\n) # %>% View()\nView(stateAbreviations )\n\nhighDiscountCustomers2 <- left_join(highDiscountCustomers,\n                                    stateAbreviations, by=\"State\") # %>% View()\nView(highDiscountCustomers2)\n\nlongLat <- query(\n  data.world(propsfile = \"www/.data.world\"),\n  dataset=\"cannata/superstoreorders\", type=\"sql\",\n  query=\"SELECT distinct NAME as City, STATE as Abbreviation,\n LATITUDE AS Latitude,\n LONGITUDE AS Longitude\n FROM bryon.`dhs-city-location-example`.`towns.csv/towns`\n where NAME in\n(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n order by NAME\",\n  queryParameters = highDiscountCustomers$City\n) # %>% View()\nView(longLat)\n\n\nhighDiscountCustomers2Longlat <- \n  inner_join(highDiscountCustomers2,Longlat, by = c(\"City\", \"Abbreviation\"))\nView(highDiscountCustomers2Longlat)\n\ndiscounts <- \n  inner_join(highDiscountCustomers2Longlat, highDiscounts, by = c(\"Order ID\"))\nView(discounts)\n\n\n# The following query is for the select list in the Barcharts -> High Sales Customers tab.\nsales = query(\n  data.world(propsfile = \"www/.data.world\"),\n  dataset=\"cannata/superstoreorders\", type=\"sql\",\n  query=\"SELECT Customer_Id as CustomerId, sum(Profit) as sumProfit, sum(Sales) as SumSales\n  from SuperStoreOrders\n  group by Customer_Id\n  having sum(Sales) > 100000\"\n) # %>% View()\n\nshinyServer(function(input, output) { \n  # These widgets are for the Crosstabs tab.\n  online1 = reactive({input$rb1})\n  KPI_Low = reactive({input$KPI1})     \n  KPI_Medium = reactive({input$KPI2})\n  \n  # These widgets are for the Barcharts tab.\n  online2 = reactive({input$rb2})\n  output$regions2 <- renderUI({selectInput(\"selectedRegions\", \"Choose Regions:\", region_list, multiple = TRUE, selected='All') })\n  \n# Begin Crosstab Tab ------------------------------------------------------------------\n  df1 <- eventReactive(input$click1, {\n      if(online1() == \"SQL\") {\n        print(\"Getting from data.world\")\n        query(\n            data.world(propsfile = \"www/.data.world\"),\n            dataset=\"cannata/superstoreorders\", type=\"sql\",\n            query=\"select Category, State, \n            sum(Profit) as sum_profit, \n            sum(Sales) as sum_sales, \n            sum(Profit) / sum(Sales) as ratio,\n            \n            case\n            when sum(Profit) / sum(Sales) < ? then '03 Low'\n            when sum(Profit) / sum(Sales) < ? then '02 Medium'\n            else '01 High'\n            end AS kpi\n            \n            from SuperStoreOrders\n            where Country_Region = 'United States of America' and\n            Category in ('Chairs  and  Chairmats', 'Office Machines', 'Tables', 'Telephones and Communication')\n            group by Category, State\n            order by Category, State\",\n            queryParameters = list(KPI_Low(), KPI_Medium())\n          ) # %>% View()\n      }\n      else {\n        print(\"Getting from csv\")\n        file_path = \"www/SuperStoreOrders.csv\"\n        df <- readr::read_csv(file_path)\n        df %>% \n          dplyr::filter(Country_Region == 'United States of America', Category %in% \n                          c('Chairs  and  Chairmats',\n                            'Office Machines',\n                            'Tables',\n                            'Telephones and Communication')) %>%\n          dplyr::group_by(Category, State) %>% \n          dplyr::summarize(sum_profit = sum(Profit), sum_sales = sum(Sales),\n                           ratio = sum(Profit) / sum(Sales),\n                           kpi = if_else(ratio <= KPI_Low(), '03 Low',\n                           if_else(ratio <= KPI_Medium(), '02 Medium', '01 High'))) # %>% View()\n      }\n  })\n  output$data1 <- renderDataTable({DT::datatable(df1(), rownames = FALSE,\n                                extensions = list(Responsive = TRUE, FixedHeader = TRUE)\n  )\n  })\n  output$plot1 <- renderPlot({ggplot(df1()) + \n    theme(axis.text.x=element_text(angle=90, size=16, vjust=0.5)) + \n    theme(axis.text.y=element_text(size=16, hjust=0.5)) +\n    geom_text(aes(x=Category, y=State, label=sum_sales), size=6) +\n    geom_tile(aes(x=Category, y=State, fill=kpi), alpha=0.50)\n  })\n# End Crosstab Tab ___________________________________________________________\n# Begin Barchart Tab ------------------------------------------------------------------\n  df2 <- eventReactive(input$click2, {\n    if(input$selectedRegions == 'All') region_list <- input$selectedRegions\n    else region_list <- append(list(\"Skip\" = \"Skip\"), input$selectedRegions)\n    if(online2() == \"SQL\") {\n      print(\"Getting from data.world\")\n      tdf = query(\n        data.world(propsfile = \"www/.data.world\"),\n        dataset=\"cannata/superstoreorders\", type=\"sql\",\n        query=\"select Category, Region, sum(Sales) sum_sales\n                from SuperStoreOrders\n                where ? = 'All' or Region in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n                group by Category, Region\",\n        queryParameters = region_list\n      ) # %>% View()\n    }\n    else {\n      print(\"Getting from csv\")\n      file_path = \"www/SuperStoreOrders.csv\"\n      df <- readr::read_csv(file_path)\n      tdf = df %>% dplyr::filter(Region %in% input$selectedRegions | input$selectedRegions == \"All\") %>%\n        dplyr::group_by(Category, Region) %>% \n        dplyr::summarize(sum_sales = sum(Sales)) # %>% View()\n    }\n    # The following two lines mimic what can be done with Analytic SQL. Analytic SQL does not currently work in data.world.\n    tdf2 = tdf %>% group_by(Category) %>% summarize(window_avg_sales = mean(sum_sales))\n    dplyr::inner_join(tdf, tdf2, by = \"Category\")\n    # Analytic SQL would look something like this:\n      # select Category, Region, sum_sales, avg(sum_sales) \n      # OVER (PARTITION BY Category ) as window_avg_sales\n      # from (select Category, Region, sum(Sales) sum_sales\n      #       from SuperStoreOrders\n      #      group by Category, Region)\n  })\n  output$barchartData1 <- renderDataTable({DT::datatable(df2(),\n                        rownames = FALSE,\n                        extensions = list(Responsive = TRUE, FixedHeader = TRUE) )\n  })\n  output$barchartData2 <- renderDataTable({DT::datatable(discounts,\n                        rownames = FALSE,\n                        extensions = list(Responsive = TRUE, FixedHeader = TRUE) )\n  })\n  output$barchartData3 <- renderDataTable({DT::datatable(sales,\n                        rownames = FALSE,\n                        extensions = list(Responsive = TRUE, FixedHeader = TRUE) )\n  })\n  output$barchartPlot1 <- renderPlot({ggplot(df2(), aes(x=Region, y=sum_sales)) +\n      scale_y_continuous(labels = scales::comma) + # no scientific notation\n      theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) + \n      theme(axis.text.y=element_text(size=12, hjust=0.5)) +\n      geom_bar(stat = \"identity\") + \n      facet_wrap(~Category, ncol=1) + \n      coord_flip() + \n      # Add sum_sales, and (sum_sales - window_avg_sales) label.\n      geom_text(mapping=aes(x=Region, y=sum_sales, label=round(sum_sales)),colour=\"black\", hjust=-.5) +\n      geom_text(mapping=aes(x=Region, y=sum_sales, label=round(sum_sales - window_avg_sales)),colour=\"blue\", hjust=-2) +\n      # Add reference line with a label.\n      geom_hline(aes(yintercept = round(window_avg_sales)), color=\"red\") +\n      geom_text(aes( -1, window_avg_sales, label = window_avg_sales, vjust = -.5, hjust = -.25), color=\"red\")\n  })\n  \n  output$barchartMap1 <- renderLeaflet({leaflet(width = 400, height = 800) %>% \n    setView(lng = -98.35, lat = 39.5, zoom = 4) %>% \n    addTiles() %>% \n    addProviderTiles(\"MapQuestOpen.Aerial\") %>%\n    addMarkers(lng = discounts$Longitude,\n      lat = discounts$Latitude,\n      options = markerOptions(draggable = TRUE, riseOnHover = TRUE),\n      popup = as.character(paste(discounts$CustomerName, \n          \", \", discounts$City,\n          \", \", discounts$State,\n          \" Sales: \",\"$\", formatC(as.numeric(discounts$sumSales), format=\"f\", digits=2, big.mark=\",\"),\n          \" Discount: \", \", \", discounts$sumDiscount)) )\n  })\n  \n  output$barchartPlot2 <- renderPlotly({p <- ggplot(sales, aes(x=as.character(CustomerId), y=sumProfit)) +\n      theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) + \n      theme(axis.text.y=element_text(size=12, hjust=0.5)) +\n      geom_bar(stat = \"identity\")\n      ggplotly(p)\n  })\n  # End Barchart Tab ___________________________________________________________\n  \n})\n",
    "created" : 1492727045018.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "356548718",
    "id" : "6D16F602",
    "lastKnownWriteTime" : 1492728932,
    "last_content_update" : 1492728932202,
    "path" : "~/DataVisualization/DrCannata/09TableauExamples/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}